--- a/dom/ipc/ContentChild.cpp	Fri Apr  3 11:10:29 2020
+++ b/dom/ipc/ContentChild.cpp
@@ -111,9 +111,7 @@
 #include "GMPServiceChild.h"
 #include "nsIStringBundle.h"
 #include "Geolocation.h"
-#include "audio_thread_priority.h"
 #include "nsIConsoleService.h"
-#include "audio_thread_priority.h"
 #include "nsIURIMutator.h"
 #include "nsIInputStreamChannel.h"
 #include "nsFocusManager.h"
@@ -1820,9 +1818,6 @@ mozilla::ipc::IPCResult ContentChild::RecvSetProcessSa
   } else {
     // Pre-start audio before sandboxing; see bug 1443612.
     if (StaticPrefs::media_cubeb_sandbox()) {
-      if (atp_set_real_time_limit(0, 48000)) {
-        NS_WARNING("could not set real-time limit at process startup");
-      }
       InstallSoftRealTimeLimitHandler();
     } else {
       Unused << CubebUtils::GetCubebContext();
--- a/dom/media/GraphRunner.cpp.orig	Wed Jan  8 01:23:31 2020
+++ b/dom/media/GraphRunner.cpp
@@ -13,7 +13,6 @@
 #include "nsISupportsImpl.h"
 #include "prthread.h"
 #include "Tracing.h"
-#include "audio_thread_priority.h"
 
 namespace mozilla {
 
@@ -95,8 +94,6 @@ bool GraphRunner::OneIteration(GraphTime aStateEnd) {
 }
 
 NS_IMETHODIMP GraphRunner::Run() {
-  atp_handle* handle =
-      atp_promote_current_thread_to_real_time(0, mGraph->GraphRate());
 
   nsCOMPtr<nsIThreadInternal> threadInternal = do_QueryInterface(mThread);
   threadInternal->SetObserver(mGraph);
@@ -119,9 +116,6 @@ NS_IMETHODIMP GraphRunner::Run() {
     mMonitor.Notify();
   }
 
-  if (handle) {
-    atp_demote_current_thread_from_real_time(handle);
-  }
 
   dom::WorkletThread::DeleteCycleCollectedJSContext();
 
--- a/dom/media/moz.build.orig	Wed Jan  8 01:23:31 2020
+++ b/dom/media/moz.build
@@ -101,7 +101,6 @@ XPIDL_SOURCES += [
 XPIDL_MODULE = 'dom_media'
 
 EXPORTS += [
-    '../../third_party/rust/audio_thread_priority/audio_thread_priority.h',
     'ADTSDecoder.h',
     'ADTSDemuxer.h',
     'AsyncLogger.h',
--- a/dom/media/UnderrunHandlerLinux.cpp.orig	Wed Jan  8 01:23:31 2020
+++ b/dom/media/UnderrunHandlerLinux.cpp
@@ -9,7 +9,6 @@
 
 #include <mozilla/Sprintf.h>
 #include <mozilla/Atomics.h>
-#include "audio_thread_priority.h"
 
 namespace mozilla {
 
@@ -57,20 +56,6 @@ void InstallSoftRealTimeLimitHandler() {
 }
 
 void DemoteThreadFromRealTime() {
-  atp_thread_info* info = atp_get_current_thread_info();
-  if (!info) {
-    NS_WARNING("Could not get current thread info when demoting thread.");
-    return;
-  }
-  int rv = atp_demote_thread_from_real_time(info);
-  if (rv) {
-    NS_WARNING("Could not demote thread from real-time.");
-    return;
-  }
-  rv = atp_free_thread_info(info);
-  if (rv) {
-    NS_WARNING("Could not free atp_thread_info struct");
-  }
   gRealtimeLimitReached = false;
 }
 
--- a/media/audioipc/audioipc/Cargo.toml.orig	Wed Jan  8 01:23:35 2020
+++ b/media/audioipc/audioipc/Cargo.toml
@@ -19,7 +19,6 @@ serde = "1.*.*"
 serde_derive = "1.*.*"
 tokio = "0.1"
 tokio-io = "0.1"
-audio_thread_priority = "0.22"
 
 [target.'cfg(unix)'.dependencies]
 iovec = "0.1"
--- a/media/audioipc/audioipc/src/messages.rs.orig	Wed Jan  8 01:23:35 2020
+++ b/media/audioipc/audioipc/src/messages.rs
@@ -5,8 +5,6 @@
 
 use crate::PlatformHandle;
 use crate::PlatformHandleType;
-#[cfg(target_os = "linux")]
-use audio_thread_priority::RtPriorityThreadInfo;
 use cubeb::{self, ffi};
 use std::ffi::{CStr, CString};
 use std::os::raw::{c_char, c_int, c_uint};
@@ -210,8 +208,6 @@ pub enum ServerMessage {
     StreamGetCurrentDevice(usize),
     StreamRegisterDeviceChangeCallback(usize, bool),
 
-    #[cfg(target_os = "linux")]
-    PromoteThreadToRealTime([u8; std::mem::size_of::<RtPriorityThreadInfo>()]),
 }
 
 // Server -> Client messages.
@@ -241,8 +237,6 @@ pub enum ClientMessage {
     StreamCurrentDevice(Device),
     StreamRegisterDeviceChangeCallback,
 
-    #[cfg(target_os = "linux")]
-    ThreadPromoted,
 
     Error(c_int),
 }
--- a/media/audioipc/client/Cargo.toml.orig	Wed Jan  8 01:23:35 2020
+++ b/media/audioipc/client/Cargo.toml
@@ -9,7 +9,6 @@ description = "Cubeb Backend for talking to remote cub
 edition = "2018"
 
 [dependencies]
-audio_thread_priority = "0.22"
 audioipc = { path="../audioipc" }
 cubeb-backend = "0.6.0"
 futures = { version="0.1.18", default-features=false, features=["use_std"] }
--- a/media/audioipc/client/src/context.rs.orig	Wed Jan  8 01:23:35 2020
+++ b/media/audioipc/client/src/context.rs
@@ -6,10 +6,6 @@
 use crate::stream;
 use crate::{assert_not_in_callback, run_in_callback};
 use crate::{ClientStream, AUDIOIPC_INIT_PARAMS};
-#[cfg(target_os = "linux")]
-use audio_thread_priority::get_current_thread_info;
-#[cfg(not(target_os = "linux"))]
-use audio_thread_priority::promote_current_thread_to_real_time;
 use audioipc::codec::LengthDelimitedCodec;
 use audioipc::frame::{framed, Framed};
 use audioipc::platformhandle_passing::{framed_with_platformhandles, FramedWithPlatformHandles};
@@ -77,32 +73,7 @@ impl ClientContext {
     }
 }
 
-#[cfg(target_os = "linux")]
-fn promote_thread(rpc: &rpc::ClientProxy<ServerMessage, ClientMessage>) {
-    match get_current_thread_info() {
-        Ok(info) => {
-            let bytes = info.serialize();
-            // Don't wait for the response, this is on the callback thread, which must not block.
-            rpc.call(ServerMessage::PromoteThreadToRealTime(bytes));
-        }
-        Err(_) => {
-            warn!("Could not remotely promote thread to RT.");
-        }
-    }
-}
 
-#[cfg(not(target_os = "linux"))]
-fn promote_thread(_rpc: &rpc::ClientProxy<ServerMessage, ClientMessage>) {
-    match promote_current_thread_to_real_time(0, 48000) {
-        Ok(_) => {
-            info!("Audio thread promoted to real-time.");
-        }
-        Err(_) => {
-            warn!("Could not promote thread to real-time.");
-        }
-    }
-}
-
 fn register_thread(callback: Option<extern "C" fn(*const ::std::os::raw::c_char)>) {
     if let Some(func) = callback {
         let thr = thread::current();
@@ -111,13 +82,6 @@ fn register_thread(callback: Option<extern "C" fn(*con
     }
 }
 
-fn promote_and_register_thread(
-    rpc: &rpc::ClientProxy<ServerMessage, ClientMessage>,
-    callback: Option<extern "C" fn(*const ::std::os::raw::c_char)>,
-) {
-    promote_thread(rpc);
-    register_thread(callback);
-}
 
 #[derive(Default)]
 struct DeviceCollectionCallback {
@@ -226,7 +190,6 @@ impl ContextOps for ClientContext {
 
         let cpu_pool = futures_cpupool::Builder::new()
             .name_prefix("AudioIPC")
-            .after_start(move || promote_and_register_thread(&rpc2, thread_create_callback))
             .before_stop(move || unregister_thread(thread_destroy_callback))
             .pool_size(params.pool_size)
             .stack_size(params.stack_size)
--- a/media/audioipc/server/Cargo.toml.orig	Wed Jan  8 01:23:35 2020
+++ b/media/audioipc/server/Cargo.toml
@@ -9,7 +9,6 @@ description = "Remote cubeb server"
 edition = "2018"
 
 [dependencies]
-audio_thread_priority = "0.22"
 audioipc = { path = "../audioipc" }
 cubeb-core = "0.6.0"
 futures = "0.1.18"
--- a/media/audioipc/server/src/lib.rs.orig	Wed Jan  8 01:23:35 2020
+++ b/media/audioipc/server/src/lib.rs
@@ -9,7 +9,6 @@ extern crate error_chain;
 #[macro_use]
 extern crate log;
 
-use audio_thread_priority::promote_current_thread_to_real_time;
 use audioipc::core;
 use audioipc::platformhandle_passing::framed_with_platformhandles;
 use audioipc::rpc;
@@ -63,12 +62,6 @@ fn run() -> Result<ServerWrapper> {
     trace!("Starting up cubeb audio server event loop thread...");
 
     let callback_thread = core::spawn_thread("AudioIPC Callback RPC", || {
-        match promote_current_thread_to_real_time(0, 48000) {
-            Ok(_) => {}
-            Err(_) => {
-                debug!("Failed to promote audio callback thread to real-time.");
-            }
-        }
         trace!("Starting up cubeb audio callback event loop thread...");
         Ok(())
     }, || {})
--- a/media/audioipc/server/src/server.rs.orig	Wed Jan  8 01:23:35 2020
+++ b/media/audioipc/server/src/server.rs
@@ -3,8 +3,6 @@
 // This program is made available under an ISC-style license.  See the
 // accompanying file LICENSE for details
 
-#[cfg(target_os = "linux")]
-use audio_thread_priority::{promote_thread_to_real_time, RtPriorityThreadInfo};
 use audioipc;
 use audioipc::codec::LengthDelimitedCodec;
 use audioipc::frame::{framed, Framed};
@@ -523,19 +521,6 @@ impl CubebServer {
                 )
                 .unwrap_or_else(error),
 
-            #[cfg(target_os = "linux")]
-            ServerMessage::PromoteThreadToRealTime(thread_info) => {
-                let info = RtPriorityThreadInfo::deserialize(thread_info);
-                match promote_thread_to_real_time(info, 0, 48000) {
-                    Ok(_) => {
-                        info!("Promotion of content process thread to real-time OK");
-                    }
-                    Err(_) => {
-                        warn!("Promotion of content process thread to real-time error");
-                    }
-                }
-                ClientMessage::ThreadPromoted
-            }
         };
 
         trace!("process_msg: req={:?}, resp={:?}", msg, resp);
--- a/toolkit/components/remote/nsRemoteService.cpp.orig	Mon Mar  9 13:10:20 2020
+++ b/toolkit/components/remote/nsRemoteService.cpp
@@ -157,6 +157,8 @@ void nsRemoteService::StartupServer() {
   if (!useX11Remote || getenv(DBUS_REMOTE_ENV)) {
     mRemoteServer = MakeUnique<nsDBusRemoteServer>();
   }
+#  else
+  return;
 #  endif
   if (!mRemoteServer && useX11Remote) {
     mRemoteServer = MakeUnique<nsGTKRemoteServer>();
--- a/toolkit/library/rust/shared/Cargo.toml.orig	Fri Apr  3 11:11:42 2020
+++ b/toolkit/library/rust/shared/Cargo.toml
@@ -40,7 +40,6 @@ storage = { path = "../../../../storage/rust" }
 bookmark_sync = { path = "../../../components/places/bookmark_sync", optional = true }
 shift_or_euc_c = "0.1.0"
 chardetng_c = "0.1.1"
-audio_thread_priority = "0.22"
 mdns_service = { path="../../../../media/mtransport/mdns_service", optional = true }
 neqo_glue = { path = "../../../../netwerk/socket/neqo_glue" }
 rlbox_lucet_sandbox = { version = "0.1.0", optional = true }
--- a/toolkit/library/rust/shared/lib.rs.orig	Wed Jan  8 01:23:40 2020
+++ b/toolkit/library/rust/shared/lib.rs
@@ -49,7 +49,6 @@ extern crate shift_or_euc_c;
 #[cfg(feature = "new_xulstore")]
 extern crate xulstore;
 
-extern crate audio_thread_priority;
 
 #[cfg(feature = "webrtc")]
 extern crate mdns_service;
--- a/toolkit/moz.configure.orig	Fri Apr  3 11:11:16 2020
+++ b/toolkit/moz.configure
@@ -67,12 +67,12 @@ set_config('MOZ_JPROF', jprof)
 set_define('MOZ_JPROF', jprof)
 imply_option('--enable-profiling', jprof)
 
-@depends(target)
-def gecko_profiler(target):
+@depends(target, check_symbol('getcontext', when=compile_environment & target_is_linux))
+def gecko_profiler(target, getcontext):
     if target.os == 'Android':
         return target.cpu in ('aarch64', 'arm', 'x86', 'x86_64')
     elif target.kernel == 'Linux':
-        return target.cpu in ('aarch64', 'arm', 'x86', 'x86_64', 'mips64')
+        return getcontext and target.cpu in ('aarch64', 'arm', 'x86', 'x86_64', 'mips64')
     return target.os in ('OSX', 'WINNT')
 
 @depends(gecko_profiler)
@@ -808,11 +808,11 @@ set_config('MOZ_IPDL_TESTS',
 # ==============================================================
 option('--disable-skia', help='Disable use of Skia')
 
-@depends('--disable-skia')
-def skia(value):
-    if not value:
-        die('--disable-skia is not supported anymore')
-    else:
+@depends('--disable-skia', target)
+def skia(value, target):
+    if value.origin == 'default' and target.endianness == 'big':
+        return None
+    if value:
         return True
 
 set_config('MOZ_ENABLE_SKIA', skia)
